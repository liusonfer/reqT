/*
package main

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	elastic "github.com/olivere/elastic/v7"
)




func EsQueryAll(index, type_, fieldName, fieldValue, start_time, stop_time string) *elastic.SearchResult {
	timeQ := elastic.NewRangeQuery("@timestamp").Gte(start_time).Lte(stop_time)
	query := elastic.NewMatchPhraseQuery(fieldName, fieldValue)
	generalQ := elastic.NewBoolQuery().Should().Filter(timeQ).Filter(query)
	searchResult, err := client.Search(index).
		Query(generalQ).RestTotalHitsAsInt(true).Size(100000).
		Do(context.Background())
	if err != nil {
		fmt.Println("sdsafsafafa", err)
		panic(err)
	}
	fmt.Println("1")
	return searchResult
}

func Atime(t string) string {
	//fmttime := "2020-08-14 00:00:00"
	localtime, _ := time.ParseInLocation("2006-01-02 15:04:05", t, time.Local)
	return localtime.UTC().Format("2006-01-02T15:04:05.000Z")
}

func main() {
	index := "data.yungehuo.com*"
	esstime := Atime("2020-11-03 00:00:00")
	esdtime := Atime("2020-11-05 23:00:00")
	PingNode()
	if ok := IndexExists(index); !ok {
		fmt.Println("没有索引")
		return
	}

	RtimeAll := make([]float32, 0)

	c := EsQueryAll(index, "_doc", "uri", "ship", esstime, esdtime)
	if c.Hits.TotalHits.Value > 0 {
		for _, hit := range c.Hits.Hits {
			var rej struct {
				Uri         string  `json:"uri"`
				RequestTime float32 `json:"request_time"`
			}
			err := json.Unmarshal(hit.Source, &rej)
			if err != nil {
				fmt.Println(err)
			}
			RtimeAll = append(RtimeAll, rej.RequestTime)
		}
		// fmt.Println(RtimeAll)
		var sum float32
		var big float32

		for _, v := range RtimeAll {
			sum += v
			if big < v {
				big, v = v, big
			}
		}
		fmt.Println(len(RtimeAll), sum/float32(len(RtimeAll)), big)
	}

}

*/